/*
 * CoordinateTab.cc
 *
 *  Created on: Mar 16, 2010
 *      Author: juergens
 */

/*
 $Id$

 Copyright (C) 2006 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include <QFont>
#include "CoordinateTab.h"
#include <iostream>
#include <QPixmap>
#include "tsSetup.h"


#include <boost/algorithm/string.hpp>
#include <boost/algorithm/string/split.hpp>
#include <boost/algorithm/string/classification.hpp>



//#include "list-add.xpm"

using namespace std;

CoordinateTab::CoordinateTab(QWidget* parent)   : QWidget(parent)
{
  //QPixmap list_add_pix(list_add_xpm);


  activeCacheRequest=false;
  modell    = new QComboBox(this);
  runl      = new QComboBox(this);
  stylel    = new QComboBox(this);
//  bookmarkl = new QComboBox(this);

//  addBookmarkButton =  new QPushButton(list_add_pix,"",this);
// addBookmarkButton->setMaximumWidth(list_add_pix.width());

  connect(stylel,SIGNAL(activated(const QString&)),    this, SIGNAL(changestyle(const QString&)));
  connect(modell,SIGNAL(activated(const QString&)),    this, SLOT(changeModel(const QString&)));
  connect(runl,SIGNAL(activated(const QString&)),      this, SLOT(changeRun(const QString&)));


  longitude = new CoordinateManager(this,Qt::Horizontal,"Lon");
  latitude  = new CoordinateManager(this,Qt::Vertical,  "Lat");

  longitude->setRange(-180,180);
  latitude->setRange(-90,90);

  connect(longitude,SIGNAL(coordinatesChanged()),this,SLOT(coordinatesChanged()));
  connect(latitude,SIGNAL(coordinatesChanged()),this,SLOT(coordinatesChanged()));

  QStringList head;
  head << tr("Bookmarks");

  bookmarks = new QTreeView(this);
  model     = new QStandardItemModel();
  model->setHorizontalHeaderLabels ( head );
  tsSetup setup;

  bookmarkTools.setMaxRecords(setup.wdb.maxRecord);
  bookmarkTools.setModel(model);
  bookmarkTools.addFolder("TRASH",true);
  bookmarkTools.read(setup.files.bookmarks,false);
  bookmarkTools.read(setup.files.commonBookmarks,true);
  bookmarkTools.addFolder("RECORD",true);
  bookmarks->setModel(model);

  bookmarks->setDragDropMode(QAbstractItemView::InternalMove);
  bookmarks->setSelectionMode(QAbstractItemView::ExtendedSelection);

  connect(bookmarks, SIGNAL(activated(QModelIndex)), this, SLOT(bookmarkClicked(QModelIndex)));
  connect(bookmarks, SIGNAL(clicked(QModelIndex)), this, SLOT(bookmarkClicked(QModelIndex)));
  // layout -------------------------------


  QVBoxLayout * vlayout     = new QVBoxLayout();  // main layout
  QHBoxLayout * latHlayout  = new QHBoxLayout();  // Hor - lat layout amd lvl layout
  QVBoxLayout * latVlayout  = new QVBoxLayout();  // Ver - lat label and slider
  QHBoxLayout * lonHlayout  = new QHBoxLayout();  // Hor - lon label and slider
  QHBoxLayout * editHlayout = new QHBoxLayout();  // Hor - lat/lon edit fields and labels

  vlayout->addWidget(stylel);
  vlayout->addWidget(modell);
  vlayout->addWidget(runl);


  latVlayout->addWidget(latitude->slider);
  latVlayout->addWidget(latitude->sliderLabel);


  latHlayout->addLayout(latVlayout);


  latHlayout->addWidget(bookmarks,3);

  lonHlayout->addWidget(longitude->sliderLabel);
  lonHlayout->addWidget(longitude->slider);
  lonHlayout->setAlignment(Qt::AlignHCenter);


  vlayout->addLayout(latHlayout);
  vlayout->addLayout(lonHlayout);

  editHlayout->addWidget(longitude->editLabel);
  editHlayout->addWidget(longitude->edit);
  editHlayout->addWidget(latitude->editLabel);
  editHlayout->addWidget(latitude->edit);

  vlayout->addLayout(editHlayout);

  setLayout(vlayout);

}


void CoordinateTab::setWdbGeometry(int minLon, int maxLon, int minLat, int maxLat)
{
  longitude->setRange( minLon, maxLon );
  latitude->setRange(  minLat, maxLat );
}

void CoordinateTab::setCoordinates(float lon, float lat, QString name)
{
  longitude->setValue(lon);
  latitude->setValue(lat);

  if(name.isEmpty())
    coordinatesChanged();
  else {
    emit changeCoordinates(lon,lat,name);
  }

}

void CoordinateTab::setLatRange(int min, int max)
{
  latitude->setRange(min,max);
}

void CoordinateTab::setLonRange(int min, int max)
{
  longitude->setRange(min,max);
}

void CoordinateTab::coordinatesChanged()
{
  float lat=latitude->getValue();
  float lon=longitude->getValue();
  bookmarkTools.addRecord(lon,lat);
  emit changeCoordinates(lon,lat,"");

}

miutil::miString CoordinateTab::coordinateString()
{
  ostringstream ost;
  ost <<  latitude->getValue() << ":" << longitude->getValue();
  return ost.str();
}


void CoordinateTab::setStyles(const QStringList& qlist)
{

  QString cur = stylel->currentText();

  stylel->clear();
  stylel->addItems(qlist);

  if(!cur.isEmpty()) {
    int idx = stylel->findText(cur);
    if( idx >= 0)
      stylel->setCurrentIndex(idx);
  }
}


void CoordinateTab::setStyle(const QString nstyle)
{
  int idx = stylel->findText(nstyle);
  if( idx >= 0)
    stylel->setCurrentIndex(idx);
}

void CoordinateTab::setModel(const QString nmodel)
{
  int idx = modell->findText(nmodel);
  if( idx >= 0) {
    modell->setCurrentIndex(idx);
    activeCacheRequest=false;
    emit changemodel(nmodel);
  }
}

void CoordinateTab::setRun(const QString nrun)
{
  QString newrun=nrun;
  int idx = runl->findText(nrun);
  if( idx >= 0) {
    runl->setCurrentIndex(idx);
  } else {
    newrun=runl->currentText();
  }
  activeCacheRequest=false;
  emit changerun(newrun);
}

void CoordinateTab::writeBookmarks()
{
  tsSetup setup;
  bookmarkTools.write(setup.files.bookmarks);

}

void CoordinateTab::setModels(const QStringList& newmodels)
{
  QString cur = modell->currentText();

  modell->clear();
  modell->addItems(newmodels);

  if(!cur.isEmpty()) {
    int idx = modell->findText(cur);
    if( idx >= 0) {
      modell->setCurrentIndex(idx);
    }
  }
  QString cur2 = modell->currentText();
  if(cur2 != cur)
    emit changemodel(cur2);

}

void CoordinateTab::setRuns(const QStringList& newruns)
{
  QString cur = runl->currentText();

  runl->clear();
  runl->addItems(newruns);

  if(!cur.isEmpty()) {
    int idx = runl->findText(cur);
    if( idx >= 0)
      runl->setCurrentIndex(idx);
  }
  QString cur2 = runl->currentText();
  if(cur != cur2)
    emit changerun(cur2);
}
void CoordinateTab::changeModel(const QString& s)
{
  activeCacheRequest=false;
  emit changemodel(s);
}

void CoordinateTab::changeRun(const QString& s)
{
  activeCacheRequest=false;
  emit changerun(s);
}



void CoordinateTab::bookmarkClicked(QModelIndex idx)
{
  QStandardItem* item=model->itemFromIndex(idx);
  if(!item) return;
  QVariant var =item->data();
  QString  coor=var.toString();
  QString  name=item->text();

  string s=coor.toStdString();
  vector<string> c;
  boost::split(c,s, boost::algorithm::is_any_of(":") );
  if(c.size() < 2) return;

  float lat= atof(c[0].c_str());
  float lon= atof(c[1].c_str());

  setCoordinates(lon,lat,name);
}

void CoordinateTab::addBookmarkFolder()
{
  bookmarkTools.addFolder("NEW",false);
}




